#!/usr/bin/env python
# -*-coding: utf-8 -*-
# license removed for brevity

import rospy
from std_msgs.msg import String, Float64, Float32, Int16
from sensor_msgs.msg import NavSatFix
import serial
import threading
import binascii
from datetime import datetime
import struct
import csv
import time


class SerialPort:

    def __init__(self, port, buand):
        self.port = serial.Serial(port, buand)
        self.port.close()
        if not self.port.isOpen():
            self.port.open()

    def port_open(self):
        if not self.port.isOpen():
            self.port.open()

    def port_close(self):
        self.port.close()

    def send_data(self, data):
        start_flag1 = struct.pack('B', 0x06)
        start_flag2 = struct.pack('B', 0x05)

        sum = 0
        if len(data) < 4:
            return 0
        for i in range(4):
            sum += data[i]
        sum = sum & 0xff
        sum_flag = struct.pack('B', sum)
        end_flag = struct.pack('B', 0x04)
        pwm_message = start_flag1 + start_flag2 + data + sum_flag + end_flag
        self.port.write(bytearray(pwm_message))
        # print pwm_message

    def read_data(self):
        global is_exit
        global data_bytes
        while not is_exit:
            count = self.port.inWaiting()
            if count > 0:
                rec_str = self.port.read(count)
                data_bytes = data_bytes + rec_str
                # print(data_bytes)


serialPort = '/dev/ttyUSB0'
baudRate = 9600  # 波特率
is_exit = False


class Nano_Serial():

    def __init__(self):
        """ Publish position based on velocity and heading
        """
        self.heading_pub = rospy.Publisher('heading', Float32, queue_size=10)
        self.wind_direction_apparent_pub = rospy.Publisher(
            "wind_direction_apparent", Float64, queue_size=10)

        self.pwm_bytes_rudder = ''
        self.pwm_bytes_sail = ''

        self.rudder_pwm_sub = rospy.Subscriber(
            'debug_rudder_pwm', Int16, self.rudderservoPWMcontrol)
        self.sail_pwm_sub = rospy.Subscriber(
            'debug_sailsheet_pwm', Int16, self.sailservoPWMcontrol)
        self.rate = rospy.Rate(10)

        self.mSerial = SerialPort(serialPort, baudRate)
        data_bytes = bytearray()
        # 开始数据读取线程
        # t1 = threading.Thread(target = self.mSerial.read_data)
        # t1.setDaemon(True)
        # t1.start()

        self.heading = Float32()
        self.wind_direction_apparent = Float64()
        # time.sleep(3)
        while not (is_exit and rospy.is_shutdown()):

            # 主线程:对读取的串口数据进行处理
            count = self.mSerial.port.inWaiting()
            while count < 25:
                count = self.mSerial.port.inWaiting()
            data_bytes = data_bytes + self.mSerial.port.read(count)
            data_len = len(data_bytes)

            i = 0
            while(i < data_len - 25):
                sum = data_bytes[i + 2] + data_bytes[i + 3] + data_bytes[i + 4] + data_bytes[i +
                                                                                             5] + data_bytes[i + 6] + data_bytes[i + 7] + data_bytes[i + 8] + data_bytes[i + 9]
                if(data_bytes[i] == 0x06 and data_bytes[i + 1] == 0x05 and sum & 0xff == data_bytes[i + 10] and data_bytes[i + 11] == 0x04):
                    YawL = data_bytes[i + 6]
                    YawH = data_bytes[i + 7]
                    self.heading.data = (((YawH << 8) | YawL) * 180 / 32768)
                    self.wind_direction_apparent.data = 360 - \
                        struct.unpack('>h', data_bytes[i + 8:i + 10])[0]
                    # 风向传感器收到的风向信息角度是反的
                    print("wind:")
                    print(self.wind_direction_apparent)
                    i = i + 12
                    # break
                else:
                    i = i + 1
            data_bytes = bytearray()

            self.msgs_publisher()
            self.pwm_bytes = bytearray(
                self.pwm_bytes_rudder + self.pwm_bytes_sail)
            self.mSerial.send_data(self.pwm_bytes)
            self.rate.sleep()

    def rudderservoPWMcontrol(self, rudder_pwm_msg):
        self.pwm_bytes_rudder = struct.pack('>h', rudder_pwm_msg.data)

    def sailservoPWMcontrol(self, sail_pwm_msg):
        self.pwm_bytes_sail = struct.pack('>h', sail_pwm_msg.data)

    def msgs_publisher(self):
        self.heading_pub.publish(self.heading)
        self.wind_direction_apparent_pub.publish(self.wind_direction_apparent)


if __name__ == '__main__':
    try:
        rospy.init_node("nano_serial", anonymous=True)
        Nano_Serial()
    except rospy.ROSInterruptException:
        pass
