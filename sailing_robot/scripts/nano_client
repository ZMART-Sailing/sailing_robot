#!/usr/bin/env python
# -*- coding:utf-8 -*-
# nano_client

import rospy
import socket
import json
import time
from std_msgs.msg import String, Float64, Float32
from sensor_msgs.msg import NavSatFix

HOST = '192.168.137.100'
PORT = 50001
address = (HOST, PORT)
is_exit = False


class Nano_Client():

    def __init__(self):
        global address
        global is_exit

        """ Publish position based on velocity and heading
        """
        self.heading_pub = rospy.Publisher('heading', Float32, queue_size = 10)
        self.position_pub = rospy.Publisher('position', NavSatFix, queue_size = 10)
        self.velocity_pub = rospy.Publisher('velocity', Float64, queue_size = 10)
        self.wind_direction_apparent_pub = rospy.Publisher("wind_direction_apparent", Float64, queue_size = 10)

        self.pwm_data = dict()
        self.pwm_data['rudder_pwm'] = 1500
        self.pwm_data['sail_pwm'] = 1500
        # set mid

        self.rudder_pwm_sub = rospy.Subscriber('debug_rudder_pwm', Float32, self.rudderservoPWMcontrol)
        self.sail_pwm_sub = rospy.Subscriber('debug_sailsheet_pwm', Float32, self.sailservoPWMcontrol)

        self.rate = rospy.Rate(10)
        self.absolute_wind_direction = rospy.get_param('nav/absolute_wind_direction', 0)

        self.heading = Float32()
        self.position = NavSatFix()
        self.velocity = Float64()
        self.wind_direction_apparent = Float64()

        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect(address)

        while not rospy.is_shutdown():
            try:
                jpwm_data = json.dumps(self.pwm_data)
                sock.sendall(jpwm_data)

                sensor_data = sock.recv(1024)
                jsensor_data = json.loads(sensor_data)
                print "Recv: ", jsensor_data
                self.heading.data = jsensor_data['heading']-165
                self.position.latitude = jsensor_data['latitude'] + 0.0
                self.position.longitude = jsensor_data['longitude'] + 0.0
                self.velocity.data = jsensor_data['velocity']
                # real wind_direction
#                self.wind_direction_apparent.data = jsensor_data['wind_direction_apparent']

                # defined wind_direction in default.yaml
                self.wind_direction_apparent.data = self.absolute_wind_direction - self.heading.data

                print(rospy.get_time())
                self.msgs_publisher()  # time.sleep(0.1)
            except BaseException:
                print("-----------------")
                break

        sock.close()

    def rudderservoPWMcontrol(self, rudder_pwm_msg):
        self.pwm_data['rudder_pwm'] = rudder_pwm_msg.data

    def sailservoPWMcontrol(self, sail_pwm_msg):
        self.pwm_data['sail_pwm'] = sail_pwm_msg.data

    def msgs_publisher(self):
        self.heading_pub.publish(self.heading)
        # self.position_pub.publish(self.position)
        self.velocity_pub.publish(self.velocity)
        self.wind_direction_apparent_pub.publish(self.wind_direction_apparent)
        self.rate.sleep()


if __name__ == '__main__':
    try:
        rospy.init_node("nano_client", anonymous = True)
        Nano_Client()
    except rospy.ROSInterruptException:
        pass
