#!/usr/bin/python
# -*- coding: UTF-8 -*-
# Simulator for the boat position based on velocity and heading


import rospy
from std_msgs.msg import Float64, Float32, String
import time, math
from sensor_msgs.msg import NavSatFix
from sailing_robot.msg import Velocity
from LatLon import LatLon
import random
from sailing_robot.navigation import Navigation
import socket
import re


class Position_simu():
    def __init__(self):
        """ Publish position based on velocity and heading
        """
        self.position_pub = rospy.Publisher('position1', NavSatFix, queue_size=10)
        self.heading_pub = rospy.Publisher('heading1', Float32, queue_size=10)
        self.goal_pub = rospy.Publisher("goal_heading1", Float32, queue_size=10)
        self.wind_direction_apparent_pub = rospy.Publisher("wind_direction_apparent1", Float64, queue_size=10)
        self.sailing_state_pub = rospy.Publisher("sailing_state1", String, queue_size=10)

        rospy.init_node("simulation_position1", anonymous=True)

        self.freq = rospy.get_param("config/rate")
        self.rate = rospy.Rate(self.freq)

        # Read init position form the /wp parameters
        try:
            wp_list = rospy.get_param('wp/list')
            wp0 = wp_list[0]
        except KeyError:
            task_list = rospy.get_param('wp/tasks')
            wp0 = task_list[0]['waypoint']
        wp_table = rospy.get_param('wp/table')
        init_position = wp_table[wp0]

        utm_zone = rospy.get_param('navigation/utm_zone')
        self.nav = Navigation(utm_zone=utm_zone)
        self.utm_position = self.nav.latlon_to_utm(init_position[0], init_position[1])

        self.position_publisher()

    def position_publisher(self):

        mySocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        host = socket.gethostname()
        # host = "47.107.161.103"
        port = 23337
        mySocket.connect((host, port))
        print("lianjiedaofuwuqi")
        
        msg_position = NavSatFix()
        heading = Float32()
        goal = Float32()
        wind_direction_apparent = Float64()
        sailing_state = String()

        while not rospy.is_shutdown():
            
            try:
                msg = mySocket.recv(1024)
                print("%s" % msg)
                while len(msg)>200:
                    mySocket.send(" ")
                    msg = mySocket.recv(1024)
                    print("wait.")
            except KeyboardInterrupt:
                mySocket.send("over")
                mySocket.shutdown(2)
                mySocket.close()
                print("over")
                break
            else:
                mySocket.send(" ")

            # msg_list = re.findall(r"\d+\.?\d*", msg)
            msg_list = msg.split(" ")
            msg_useful = []
            start_flag = False
            cheak = False
            for msg in msg_list:
                if msg == "0605":
                    start_flag = True
                    continue
                if start_flag:
                    msg_useful.append(msg)
                if msg == "1011" and start_flag:
                    cheak = True
                    break

            if cheak:
                
                msg_position.latitude = float(msg_useful[0]) 
                msg_position.longitude = float(msg_useful[1])
                
                heading.data = float(msg_useful[2])
                goal.data = float(msg_useful[3])
                wind_direction_apparent.data = float(msg_useful[4])
                sailing_state.data = msg_useful[5]


                self.position_pub.publish(msg_position)
                self.heading_pub.publish(heading)
                self.goal_pub.publish(goal)
                self.wind_direction_apparent_pub.publish(wind_direction_apparent)
                self.sailing_state_pub.publish(sailing_state)

            self.rate.sleep()


if __name__ == '__main__':
    try:
        Position_simu()
    except rospy.ROSInterruptException:
        pass
